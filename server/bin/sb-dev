#!/usr/bin/env node

require('source-map-support/register');

const { resolve } = require('path');
const parseArgs = require('minimist');
const { readFileSync } = require('fs');
const pkgUp = require('pkg-up');
const chokidar = require('chokidar');

const Server = require('../dist/server').default;

process.env.NODE_ENV = process.env.NODE_ENV || 'development';

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    p: 'port',
    H: 'hostname',
  },
  boolean: ['h'],
  string: ['H'],
  default: {
    p: 3000,
  },
});

if (argv.help) {
  console.log(`
    Description
      Starts the application in development mode (hot-code reloading, error
      reporting, etc)

    Usage
      $ @sb/serve dev <dir> -p <port number>

    <dir> represents where the compiled folder should go.
    If no directory is provided, the folder will be created in the current directory.
    You can set a custom folder in config https://github.com/zeit/next.js#custom-configuration.

    Options
      --port, -p      A port number on which to start the application
      --hostname, -H  Hostname on which to start the application
      --help, -h      Displays this message
  `);
  process.exit(0);
}

// TODO: should implement the option to pass in a different 'dir'

const srv = new Server({ dev: true });
srv
  .start(argv.port, argv.hostname)
  .then(async () => {
    if (!process.env.NOW) {
      console.log(`> Ready on http://${argv.hostname ? argv.hostname : 'localhost'}:${argv.port}`);
    }
  })
  .catch(err => {
    if (err.code === 'EADDRINUSE') {
      let errorMessage = `Port ${argv.port} is already in use.`;
      const pkgAppPath = pkgUp.sync('.');
      const appPackage = JSON.parse(readFileSync(pkgAppPath, 'utf8'));
      const nextScript = Object.entries(appPackage.scripts).find(
        scriptLine => scriptLine[1] === 'next'
      );
      if (nextScript) errorMessage += `\nUse \`npm run ${nextScript[0]} -- -p <some other port>\`.`;
      console.error(errorMessage);
    } else {
      console.error(err);
    }
    process.nextTick(() => process.exit(1));
  });

const hmr_docs = (type, path) => {
  console.log(`${type}: ${path}`);
  srv.hotReloadDocs();
};

chokidar
  .watch(resolve(process.cwd(), 'docs'), { ignoreInitial: true })
  .on('change', hmr_docs)
  .on('unlink', hmr_docs);
